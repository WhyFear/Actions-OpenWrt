name: Build OpenWrt for L1Pro

on:
  release:
    types: published
  push:
    branches:
      - master
    paths:
      - ".config_L1Pro"
  watch:
    types: started

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config_L1Pro
  DIY_P1_SH: diy_for_L1Pro.sh
  DIY_P2_SH: diy_part2.sh
  MAKE_ENV_FILE: make.env
  MAKE_SH_FILE: mk_rk3328_l1pro.sh
  PACK_DEVICE_NAME: L1Pro
  UPLOAD_PACK: true
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: false
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-18.04

    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-1804)
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"

      - name: Clone source code
        run: |
          df -hT $PWD
          git clone --depth=1 $REPO_URL -b $REPO_BRANCH openwrt
          mkdir -p openwrt/package/custom
          cd openwrt/package/custom
          git clone --depth=1 https://github.com/Lienol/openwrt-package.git
          git clone --depth=1 https://github.com/vernesong/OpenClash.git
          git clone --depth=1 https://github.com/fw876/helloworld.git
          git clone --depth=1 https://github.com/tty228/luci-app-serverchan.git
          git clone --depth=1 https://github.com/jerrykuku/luci-theme-argon.git -b 18.06
          git clone --depth=1 https://github.com/rufengsuixing/luci-app-adguardhome.git
          cd ../../..

      - name: Prepare for packing firmware
        if: env.UPLOAD_PACK == 'true' && !cancelled()
        run: |
          git clone --depth=1 https://github.com/unifreq/openwrt_packit opt
          mkdir -p opt/kernel
          mkdir -p opt/tmp
          mv pack/kernel/* opt/kernel/
          ls -al opt/kernel/
          [ -e $MAKE_ENV_FILE ] && mv -f $MAKE_ENV_FILE opt/make.env

      - name: Load custom feeds
        run: |
          [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
          chmod +x $DIY_P1_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P1_SH

      - name: Update feeds
        run: cd openwrt && ./scripts/feeds update -a

      - name: Install feeds
        run: cd openwrt && ./scripts/feeds install -a

      - name: Load custom configuration
        run: |
          [ -e files ] && mv files openwrt/files
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
          chmod +x $DIY_P2_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P2_SH

      - name: SSH connection to Actions
        uses: P3TERX/ssh2actions@v1.0.0
        if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh != 'false') || contains(github.event.action, 'ssh')
        env:
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

      - name: Download package
        id: package
        run: |
          cd openwrt
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile the firmware
        id: compile
        run: |
          cd openwrt
          echo -e "$(nproc) thread compile"
          make -j$(nproc) || make -j1 || make -j1 V=s
          echo "::set-output name=status::success"
          grep '^CONFIG_TARGET_ARCH_PACKAGES=.*' .config | sed -r 's/.*CONFIG_TARGET_ARCH_PACKAGES="(.*)"/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

      - name: Check space usage
        if: (!cancelled())
        run: df -hT

      - name: Upload bin directory
        uses: actions/upload-artifact@main
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
        with:
          name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: openwrt/bin

      - name: Organize files
        id: organize
        if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        run: |
          cd openwrt/bin/targets/*/*
          rm -rf packages
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "::set-output name=status::success"

      - name: Upload firmware directory
        id: upload
        uses: actions/upload-artifact@main
        if: steps.organize.outputs.status == 'success' && !cancelled()
        with:
          name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}

      - name: Pack the firmware
        id: pack
        if: env.UPLOAD_PACK == 'true' && steps.organize.outputs.status == 'success' && !cancelled()
        run: |
          cp ${{ env.FIRMWARE }}/openwrt-armvirt-64-default-rootfs.tar.gz opt/
          cd opt
          chmod +x $MAKE_SH_FILE
          $MAKE_SH_FILE
          echo "IMAGE=$PWD" >> $GITHUB_ENV
          echo "::set-output name=status::success"

      - name: Upload packed img
        id: upload_img
        uses: actions/upload-artifact@main
        if: env.UPLOAD_PACK == 'true' && steps.pack.outputs.status == 'success' && !cancelled()
        with:
          name: OpenWrt_image_${{ env.PACK_DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.IMAGE }}

      - name: Generate release tag
        id: tag
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        run: |
          echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
          touch release.txt
          echo "::set-output name=status::success"

      - name: Upload firmware to release
        uses: softprops/action-gh-release@v1
        if: steps.tag.outputs.status == 'success' && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: |
            ${{ env.FIRMWARE }}/*

      - name: Delete workflow runs
        uses: GitRML/delete-workflow-runs@main
        with:
          retain_days: 1
          keep_minimum_runs: 3

      - name: Remove old Releases
        uses: dev-drprasad/delete-older-releases@v0.1.0
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        with:
          keep_latest: 3
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Send compile success message to user via serverchan
        if: (!cancelled())
        env:
          SCKEY: ${{ secrets.SCKEY }}
        run: |
          [ steps.upload.outputs.status == 'success' ] && curl https://sc.ftqq.com/$SCKEY.send?text=compile_successed
          [ steps.upload.outputs.status == 'failure' ] && curl https://sc.ftqq.com/$SCKEY.send?text=compile_failed
